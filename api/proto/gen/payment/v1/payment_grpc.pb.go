// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: payment/v1/payment.proto

// buf:lint:ignore PACKAGE_DIRECTORY_MATCH

package paymentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WechatPaymentService_NativePrePay_FullMethodName = "/payment.v1.WechatPaymentService/NativePrePay"
	WechatPaymentService_GetPayment_FullMethodName   = "/payment.v1.WechatPaymentService/GetPayment"
)

// WechatPaymentServiceClient is the client API for WechatPaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WechatPaymentServiceClient interface {
	//	这个设计是认为，Prepay 的请求应该是不同的支付方式都是一样的
	//
	// 但是我们认为响应会是不一样的
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	NativePrePay(ctx context.Context, in *PrePayRequest, opts ...grpc.CallOption) (*NativePrePayResponse, error)
	GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error)
}

type wechatPaymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWechatPaymentServiceClient(cc grpc.ClientConnInterface) WechatPaymentServiceClient {
	return &wechatPaymentServiceClient{cc}
}

func (c *wechatPaymentServiceClient) NativePrePay(ctx context.Context, in *PrePayRequest, opts ...grpc.CallOption) (*NativePrePayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NativePrePayResponse)
	err := c.cc.Invoke(ctx, WechatPaymentService_NativePrePay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatPaymentServiceClient) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentResponse)
	err := c.cc.Invoke(ctx, WechatPaymentService_GetPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WechatPaymentServiceServer is the server API for WechatPaymentService service.
// All implementations must embed UnimplementedWechatPaymentServiceServer
// for forward compatibility.
type WechatPaymentServiceServer interface {
	//	这个设计是认为，Prepay 的请求应该是不同的支付方式都是一样的
	//
	// 但是我们认为响应会是不一样的
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	NativePrePay(context.Context, *PrePayRequest) (*NativePrePayResponse, error)
	GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error)
	mustEmbedUnimplementedWechatPaymentServiceServer()
}

// UnimplementedWechatPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWechatPaymentServiceServer struct{}

func (UnimplementedWechatPaymentServiceServer) NativePrePay(context.Context, *PrePayRequest) (*NativePrePayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativePrePay not implemented")
}
func (UnimplementedWechatPaymentServiceServer) GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (UnimplementedWechatPaymentServiceServer) mustEmbedUnimplementedWechatPaymentServiceServer() {}
func (UnimplementedWechatPaymentServiceServer) testEmbeddedByValue()                              {}

// UnsafeWechatPaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WechatPaymentServiceServer will
// result in compilation errors.
type UnsafeWechatPaymentServiceServer interface {
	mustEmbedUnimplementedWechatPaymentServiceServer()
}

func RegisterWechatPaymentServiceServer(s grpc.ServiceRegistrar, srv WechatPaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedWechatPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WechatPaymentService_ServiceDesc, srv)
}

func _WechatPaymentService_NativePrePay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrePayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPaymentServiceServer).NativePrePay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPaymentService_NativePrePay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPaymentServiceServer).NativePrePay(ctx, req.(*PrePayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatPaymentService_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPaymentServiceServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPaymentService_GetPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPaymentServiceServer).GetPayment(ctx, req.(*GetPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WechatPaymentService_ServiceDesc is the grpc.ServiceDesc for WechatPaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WechatPaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.WechatPaymentService",
	HandlerType: (*WechatPaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NativePrePay",
			Handler:    _WechatPaymentService_NativePrePay_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _WechatPaymentService_GetPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/payment.proto",
}
