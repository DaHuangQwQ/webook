// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"webook/interactive/events"
	"webook/interactive/grpc"
	"webook/interactive/ioc"
	"webook/interactive/repository"
	"webook/interactive/repository/cache"
	"webook/interactive/repository/dao"
	"webook/interactive/service"
)

// Injectors from wire.go:

func InitAPP() *App {
	srcDB := ioc.InitSRC()
	dstDB := ioc.InitDST()
	loggerV1 := ioc.InitLogger()
	doubleWritePool := ioc.InitDoubleWritePool(srcDB, dstDB, loggerV1)
	db := ioc.InitBizDB(doubleWritePool)
	interactiveDao := dao.NewGormInteractiveDao(db)
	cmdable := ioc.InitRedis()
	interactiveCache := cache.NewRedisInteractiveCache(cmdable)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDao, interactiveCache)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	interactiveServiceServer := grpc.NewInteractiveServiceServer(interactiveService)
	client := ioc.InitEtcdClient()
	server := ioc.NewGrpcxServer(interactiveServiceServer, loggerV1, client)
	saramaClient := ioc.InitKafka()
	interactiveReadEventConsumer := events.NewInteractiveReadEventConsumer(saramaClient, interactiveRepository, loggerV1)
	consumer := ioc.InitFixDataConsumer(loggerV1, srcDB, dstDB, saramaClient)
	v := ioc.NewConsumers(interactiveReadEventConsumer, consumer)
	syncProducer := ioc.InitSyncProducer(saramaClient)
	producer := ioc.InitMigradatorProducer(syncProducer)
	ginxServer := ioc.InitMigratorWeb(loggerV1, srcDB, dstDB, doubleWritePool, producer)
	app := &App{
		server:    server,
		consumers: v,
		webAdmin:  ginxServer,
	}
	return app
}

// wire.go:

var interactiveServerProviderSet = wire.NewSet(service.NewInteractiveService, repository.NewCachedInteractiveRepository, cache.NewRedisInteractiveCache, dao.NewGormInteractiveDao)

var thirdPartySet = wire.NewSet(ioc.InitDST, ioc.InitSRC, ioc.InitBizDB, ioc.InitRedis, ioc.InitLogger, ioc.InitKafka, ioc.InitEtcdClient, ioc.InitDoubleWritePool, ioc.InitSyncProducer)

var migratorProviderSet = wire.NewSet(ioc.InitMigratorWeb, ioc.InitMigradatorProducer, ioc.InitFixDataConsumer, ioc.NewConsumers)
