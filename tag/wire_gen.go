// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"webook/tag/events"
	"webook/tag/grpc"
	"webook/tag/ioc"
	"webook/tag/repository"
	"webook/tag/repository/cache"
	"webook/tag/repository/dao"
	"webook/tag/service"
)

// Injectors from wire.go:

func initApp() *App {
	loggerV1 := ioc.InitLogger()
	db := ioc.InitDB(loggerV1)
	tagDAO := dao.NewGORMTagDAO(db)
	cmdable := ioc.InitRedis()
	tagCache := cache.NewRedisTagCache(cmdable)
	tagRepository := repository.NewTagRepository(tagDAO, tagCache, loggerV1)
	client := ioc.InitKafka()
	syncProducer := ioc.InitSyncProducer(client)
	producer := events.NewSaramaSyncProducer(syncProducer)
	tagService := service.NewTagService(tagRepository, producer, loggerV1)
	tagServiceServer := grpc.NewTagServiceServer(tagService)
	clientv3Client := ioc.InitEtcdClient()
	server := ioc.NewGrpcxServer(tagServiceServer, loggerV1, clientv3Client)
	app := &App{
		server: server,
	}
	return app
}

// wire.go:

var serverSet = wire.NewSet(cache.NewRedisTagCache, dao.NewGORMTagDAO, repository.NewTagRepository, service.NewTagService, grpc.NewTagServiceServer, events.NewSaramaSyncProducer)

var thirdSet = wire.NewSet(ioc.InitLogger, ioc.InitDB, ioc.InitRedis, ioc.InitEtcdClient, ioc.NewGrpcxServer, ioc.InitKafka, ioc.InitSyncProducer)
